{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "InstantiateMsg",
  "type": "object",
  "required": [
    "aterra_token_addr",
    "decimals",
    "money_market_addr",
    "name",
    "owner",
    "redeem_fee_cap",
    "redeem_fee_ratio",
    "stable_denom",
    "symbol"
  ],
  "properties": {
    "aterra_token_addr": {
      "description": "Anchor aTerra Token contract address",
      "type": "string"
    },
    "decimals": {
      "description": "decimal places of the derivative token (for UI)",
      "type": "integer",
      "format": "uint8",
      "minimum": 0.0
    },
    "money_market_addr": {
      "description": "Anchor Money Market contract address",
      "type": "string"
    },
    "name": {
      "description": "name of the derivative token",
      "type": "string"
    },
    "owner": {
      "description": "account that collects Anchor & relay fees",
      "type": "string"
    },
    "redeem_fee_cap": {
      "description": "Redeem fee cap (in stablecoin denom), default max u128",
      "allOf": [
        {
          "$ref": "#/definitions/Uint128"
        }
      ]
    },
    "redeem_fee_ratio": {
      "description": "Redeem fee ratio between 0 and 1, default 0",
      "allOf": [
        {
          "$ref": "#/definitions/Decimal256"
        }
      ]
    },
    "stable_denom": {
      "description": "stablecoin denom (e.g. uusd)",
      "type": "string"
    },
    "symbol": {
      "description": "symbol / ticker of the derivative token",
      "type": "string"
    }
  },
  "definitions": {
    "Decimal256": {
      "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal256(1_000_000_000_000_000_000) == 1.0 The greatest possible value that can be represented is 115792089237316195423570985008687907853269984665640564039457.584007913129639935 (which is (2^128 - 1) / 10^18)",
      "type": "string"
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
